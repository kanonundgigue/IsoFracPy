import os
from IPython import get_ipython

def save_figure_with_confirmation(figure, results_dir, figure_name, suffix=".png", check_overwrite=True, notebook_path=None):
    """
    Save a matplotlib figure with the option to check for file overwrite and log the file name in README.md if not already present.
    Optionally logs the notebook path if provided.
    マットプロットリブ図を保存し、ファイルの上書きを確認し、まだ存在しない場合はREADME.mdにファイル名を記録するオプション付き。
    必要に応じてノートブックのパスを記録することもできます。

    Parameters:
    - figure: Matplotlib figure object to be saved.
      保存するマットプロットリブ図のオブジェクト。
    - results_dir: Directory to save the figure.
      図を保存するディレクトリ。
    - figure_name: Name of the figure file.
      図のファイル名。
    - suffix: File extension, default is ".png".
      ファイルの拡張子、デフォルトは ".png"。
    - check_overwrite: Check if file exists and ask for overwrite confirmation, default is True.
      ファイルが存在するか確認し、上書き確認を求めるかどうか、デフォルトは True。
    - notebook_path: Path of the notebook used to generate the figure, optional.
      図を生成するために使用されたノートブックのパス、オプショナル。

    Example usage:
    使い方の例：
    ```
    figure = plt.figure()  # Create a figure
    figure = plt.figure()  # 図を作成する
    save_figure_with_confirmation(figure, "path/to/directory", "figure_name", notebook_path="path/to/notebook")

    Note: This function is intended for use in various Python environments, including Jupyter Notebooks.
    注意：この関数はJupyterノートブックを含む様々なPython環境での使用を目的としています。
    ```
    """
    
    file_path = os.path.join(results_dir, "figures",f"{figure_name}{suffix}")
    
    # Check if the file already exists
    if os.path.exists(file_path) and check_overwrite:
        response = input(f"The file '{file_path}' already exists. Overwrite? (y/n): ")
        if response.lower() != 'y':
            print("File not saved to avoid overwriting.")
            return

    # Save the figure
    figure.savefig(file_path)
    print(f"File saved as '{file_path}'.")

    # Log the file name in README.md if not already present
    readme_path = os.path.join(results_dir, "README.md")
    filename_entry = f"{figure_name}{suffix}"
    if notebook_path:
#        entry += f" (Generated by {notebook_path})"
        entry = f"[{filename_entry}](figures/{filename_entry}) (Generated by {notebook_path})"
    
    with open(readme_path, "a+") as readme_file:
        readme_file.seek(0)  # Move file pointer to the beginning of the file
        readme_content = readme_file.read()
        if filename_entry not in readme_content:
            readme_file.write(f"\n- {entry}")
            print(f"Logged in {readme_path}: {entry}")



